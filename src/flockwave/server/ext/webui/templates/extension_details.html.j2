{% extends "_layout.html.j2" %}

{% import "_tags.html.j2" as tags %}

{% block body %}

<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="{{ url_for('.list_extensions') }}">Extensions</a></li>
    <li class="breadcrumb-item active" aria-current="page">{{ extension.name }}</li>
  </ol>
</nav>

<div class="pb-3 px-3">

{% if extension.description %}
<p class="lead">{{ extension.description }}</p>
{% endif %}

<dl class="row">
  <dt class="col-sm-2">Status</dt>
  <dd class="col-sm-10">
    {% if extension.loaded %}
      <span class="text-success"><strong>loaded</strong></span>
    {% else %}
      <span class="text-danger">unloaded</span>
    {% endif %}
  </dd>

  {% if extension.dependencies %}
  <dt class="col-sm-2">Dependencies</dt>
  <dd class="col-sm-10">
    {% for dep in extension.dependencies %}
      <a href="{{ url_for('.show_extension_details', name=dep) }}">{{ dep }}</a>
      {{ "·" if not loop.last else "" }}
    {% endfor %}
  </dd>
  {% endif %}

  {% if extension.dependents %}
  <dt class="col-sm-2">Dependents</dt>
  <dd class="col-sm-10">
    {% for dep in extension.dependents %}
      <a href="{{ url_for('.show_extension_details', name=dep) }}">{{ dep }}</a>
      {{ "·" if not loop.last else "" }}
    {% endfor %}
  </dd>
  {% endif %}

  {% if extension.tags %}
  <dt class="col-sm-2">Tags</dt>
  <dd class="col-sm-10">
    {{ tags.inline_list(extension.tags) }}
  </dd>
  {% endif %}

  {% if extension.restart_requested %}
  <dt class="col-sm-2">Restart requested</dt>
  <dd class="col-sm-10">yes</dd>
  {% endif %}
</dl>

<div class="sticky-top pt-1 pb-4">
{% if extension.loaded %}
<button class="btn btn-primary sb-btn-reload">
  <span data-feather="refresh-cw"></span> Reload
</button>
<button class="btn btn-primary sb-btn-apply-and-reload" style="display: none">
  <span data-feather="refresh-cw"></span> Apply and reload
</button>
<button class="btn btn-danger sb-btn-unload">
  <span data-feather="trash-2"></span> Unload
</button>
{% endif %}
{% if not extension.loaded %}
<button class="btn btn-success sb-btn-load">
  <span data-feather="play"></span> Load
</button>
{% endif %}
</div>

{% if schema %}
<div id="configuration" class="json-schema-editor">
</div>
{% else %}
<form>
  <div class="form-group">
    <label for="configuration">Configuration</label>
    <div id="configuration" class="code-editor" style="height: 232px"></div>
  </div>
</form>
{% endif %}

</div>

{% endblock %}

{% block backmatter %}

<script>
var isDirty = false;
var isValid = true;

function setDirty(value) {
  value = !!value;
  if (value !== isDirty) {
    isDirty = value;
    updateButtons();
  }
}

function setValid(value) {
  value = !!value;
  if (value !== isValid) {
    isValid = value;
    updateButtons();
  }
}

function updateButtons() {
  buttons = document.querySelectorAll(".sb-btn-reload");
  for (let button of buttons) {
    button.style.display = isDirty ? "none" : "inline-block";
    button.disabled = !isValid;
  }

  buttons = document.querySelectorAll(".sb-btn-apply-and-reload");
  for (let button of buttons) {
    button.style.display = !isDirty ? "none" : "inline-block";
    button.disabled = !isValid;
  }
}
</script>

{% if schema and schema.properties %}
  <script type="text/javascript" src="static/js/jsoneditor-2.5.4.min.js"></script>
  <script>
  const element = document.getElementById('configuration');
  const editor = new JSONEditor(element, {
    array_controls_top: true,
    compact: true,
    disable_array_delete_all_rows: true,
    disable_array_delete_last_row: true,
    disable_collapse: true,
    disable_edit_json: true,
    disable_properties: true,
    form_name_root: 'config',
    prompt_before_delete: false,
    required_by_default: true,
    schema: {{ schema | tojson(indent=2) }},
    show_opt_in: true,
    startval: {{ config | tojson(indent=2) }},
    theme: 'bootstrap4'
  });
  const originalContent = JSON.stringify(editor.getValue());
  let nextChangeIsFirst = true;

  function isConfigurationValid() {
    const errors = editor.validate();
    return errors.length === 0;
  }

  function getNewConfigIfChanged() {
    const newParsedContent = editor.getValue();
    if (JSON.stringify(newParsedContent) === originalContent) {
      return {};
    } else {
      return { config: newParsedContent };
    }
  }

  editor.on("change", function() {
    if (nextChangeIsFirst) {
      nextChangeIsFirst = false;
      return;
    }

    const newValue = editor.getValue();
    if (JSON.stringify(newValue) === originalContent) {
      setDirty(false);
      setValid(true);
    } else {
      setDirty(true);
      setValid(isConfigurationValid());
    }
  });

  tables = document.querySelectorAll(".json-schema-editor .table");
  for (let table of tables) {
    let card = table.parentNode;

    table.classList.add("table-borderless");
    if (card.classList.contains("card")) {
      card.parentNode.appendChild(table);
      card.remove();
    }
  }

  headers = document.querySelectorAll(".json-schema-editor .table th");
  for (let header of headers) {
    if (header.textContent === "row" && header.parentNode && header.parentNode.firstChild === header && header.parentNode.childNodes.length === 2) {
      header.parentNode.style.display = "none";
      console.log(header.textContent);
    }
  }
  </script>
{% else %}
  <script type="text/javascript" src="static/js/ace-1.4.12.min.js"></script>
  <script>
  ace.config.setModuleUrl("ace/mode/json", "static/js/ace-mode-json-1.4.12.min.js");
  ace.config.setModuleUrl("ace/mode/json_worker", "static/js/ace-worker-json-1.4.12.min.js");

  const editor = ace.edit("configuration", {
    mode: "ace/mode/json",
    showPrintMargin: false,
  });
  editor.session.setTabSize(2);
  editor.session.setUseSoftTabs(true);

  const config = {{ config | tojson(indent=2) }};
  const originalContent = JSON.stringify(config, null, 2);
  editor.setValue(originalContent, 1);

  editor.on("input", function() {
    var newValue = editor.getValue();

    if (newValue === originalContent) {
      setDirty(false);
      setValid(true);
    } else {
      setDirty(true);
      setValid(isConfigurationValid());
    }
  });

  function isConfigurationValid() {
    const value = editor.getValue();
    try {
      JSON.parse(value);
      return true;
    } catch {
      return false;
    }
  }

  function getNewConfigIfChanged() {
    const newContent = editor.getValue();
    if (newContent !== originalContent) {
      const newParsedContent = JSON.parse(newContent);
      return { config: newParsedContent };
    } else {
      return {};
    }
  }
  </script>
{% endif %}

<script type="module">
import ky from './static/js/ky-0.27.0.min.js';

async function load() {
  let newConfig;

  try {
    newConfig = getNewConfigIfChanged();
  } catch (ex) {
    alert("Configuration has errors; please fix them and try again.");
    console.error(ex);
    return;
  }

  const { result, error } = await ky.post("{{ url_for('.load_extension', name=extension.name) }}", { json: newConfig }).json();
  if (error !== undefined) {
    alert("Failed to load extension.");
    console.error(error);
  } else {
    window.location.reload();
  }
}

async function unload() {
  const { result, error } = await ky.post("{{ url_for('.unload_extension', name=extension.name) }}").json();
  if (error !== undefined) {
    alert("Failed to unload extension.");
    console.error(error);
  } else {
    window.location.reload();
  }
}

async function reload() {
  let newConfig;

  try {
    newConfig = getNewConfigIfChanged();
  } catch (ex) {
    alert("Configuration has errors; please fix them and try again.");
    console.error(ex);
    return;
  }

  const { result, error } = await ky.post("{{ url_for('.reload_extension', name=extension.name) }}", { json: newConfig }).json();
  if (error !== undefined) {
    alert("Failed to reload extension.");
    console.error(error);
  } else {
    window.location.reload();
  }
}

let buttons;

buttons = document.querySelectorAll(".sb-btn-unload");
for (let button of buttons) {
  button.addEventListener('click', unload);
}

buttons = document.querySelectorAll(".sb-btn-load");
for (let button of buttons) {
  button.addEventListener('click', load);
}

buttons = document.querySelectorAll(".sb-btn-reload");
for (let button of buttons) {
  button.addEventListener('click', reload);
}

buttons = document.querySelectorAll(".sb-btn-apply-and-reload");
for (let button of buttons) {
  button.addEventListener('click', reload);
}
</script>
{% endblock %}
